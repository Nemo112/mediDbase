#!/usr/bin/python
# -*- coding: utf-8 -*-
## \file DBHand.py
## \brief Class for getting information from db file

import os
import glob
from Indx import Indx
from SysMnt import SysMnt

class DBHand:
	""" \brief Class for working with DBfiles
	"""
	def __init__(self):
		""" Constructor of the class
		\param self Pointer on class
		"""
		## Dbs file path
		self.dbs = "./dblst.csv"
		## List files dir
		self.lsts = "./lists"
		if os.path.isfile(self.dbs) == False:
			raise FileNotFoundError()
		if os.path.isdir(self.lsts) == False:
			raise FileNotFoundError()
		
	def getLastName(self):
		""" Method for getting last name
		\param self Pointer on class
		\return Last name
		"""
		a=open(self.dbs,'r')
		l = a.readlines()
		a.close()
		if len(l) == 0:
			return ""
		i=-1
		while l[i].replace(" ","") == "":
			i -= 1
		return l[i].split(";")[0]
	def getByName(self,name):
		""" Getter by name
		\param name Name of medium
		\param self Pointer on class
		\return Dict containing result
		"""
		# line in db:
		# heellhs;hash;date;./lists/helllhs.txt
		# name;hash;date;path to file list
		fl=open(self.dbs,"r")
		cnt=fl.read()
		fl.close()
		for ln in cnt.split("\n"):
			if ln.replace(" ","") == "":
				continue
			if ln.split(";")[0] == name:
				tmp=dict()
				tmp['name']=name
				tmp['hash']=ln.split(";")[1]
				tmp['date']=ln.split(";")[2]
				tmp['path']=ln.split(";")[3]
				return tmp
		return None
	def getByDate(self,date):
		""" Getter by date
		\param date Date of media
		\param self Pointer on class
		\return Dict containing result
		"""
		# line in db:
		# heellhs;hash;date;./lists/helllhs.txt
		# name;hash;date;path to file list
		fl=open(self.dbs,"r")
		cnt=fl.read()
		fl.close()
		for ln in cnt.split("\n"):
			if ln.replace(" ","") == "":
				continue
			if ln.split(";")[2] == date:
				tmp=dict()
				tmp['name']=ln.split(";")[0]
				tmp['hash']=ln.split(";")[1]
				tmp['date']=date
				tmp['path']=ln.split(";")[3]
				return tmp
		return None
	def getByHash(self,hash):
		""" Getter from dbase by hash
		\param hash Hash of medium
		\param self Pointer on class
		\return Dict containing result
		"""
		fl=open(self.dbs,"r")
		cnt=fl.read()
		fl.close()
		for ln in cnt.split("\n"):
			if ln.replace(" ","") == "":
				continue
			if ln.split(";")[1] == hash:
				tmp=dict()
				tmp['name']=ln.split(";")[0]
				tmp['hash']=hash
				tmp['date']=ln.split(";")[2]
				tmp['path']=ln.split(";")[3]
				return tmp
		return None
	def getByContFls(self,name):
		""" Constructor of the class
		\param name Name of file to by looking
		\param self Pointer on class
		\return Dict containing result
		"""
		gFl=""
		lst=glob.glob(self.lsts + "/*.txt")
		for fl in lst:
			f=open(fl,"r")
			cn=f.read()
			f.close()
			for line in cn.split("\n"):
				if name in line:
					gFl=fl
					break
		fl=open(self.dbs,"r")
		cnt=fl.read()
		fl.close()
		for ln in cnt.split("\n"):
			if ln.replace(" ","") == "":
				continue
			if ln.split(";")[3] == gFl:
				tmp=dict()
				tmp['name']=ln.split(";")[0]
				tmp['hash']=ln.split(";")[1]
				tmp['date']=ln.split(";")[2]
				tmp['path']=gFl
				return tmp
		return None
	def genNewInput(self,name,flP,mnt,qo=None):
		""" Inputs new line in DBase
		\param name Name of media given by user
		\param flP Path to sample
		\param mnt Mounted fs
		\param qo Output queue
		\param self Pointer on class
		"""
		# line in db:
		# heellhs;hash;date;./lists/helllhs.txt
		# name;hash;date;path to file list
		if qo != None:
			qo.put("Preparing...;0")
		# generating line to db
		ind=Indx()
		if qo != None:
			qo.put("Generating name;5")
		nm=ind.makeName(name,self)
		if qo != None:
			qo.put("Name ready;15")
			qo.put("Generating sample;20")
		s=SysMnt()
		s.ddSam(flP)
		if qo != None:
			qo.put("Sample done;25")
			qo.put("Generating hash;30")
		hs=ind.hashFile("./cache/check.bin")
		if qo != None:
			qo.put("Hash ready;40")
			qo.put("Testing if in DB;40")
		res=self.getByHash(hs)
		if res != None:
			if qo != None:
				qo.put("Already in DBase;100")
			return
		if qo != None:
			qo.put("Generating date;50")
		dt=ind.getTime()
		if qo != None:
			qo.put("Date ready;75")
			qo.put("Generating DB input;75")
		lst=ind.lstFiles(mnt)
		# Writting line in db
		if qo != None:
			qo.put("DB ready;85")
		fl=open(self.dbs,"a")
		fl.write("\n" + nm + ";" + hs + ";" + dt + ";" + self.lsts + "/" + nm + ".txt")
		fl.close()
		# Writting list of medium
		fl=open(self.lsts + "/" + nm + ".txt","w")
		fl.write(lst)
		fl.close()
		if qo != None:
			qo.put("Generating booklet;90")
		it=self.getByName(nm)
		self.genBookl(it)
		if qo != None:
			qo.put(nm + " done;100")
	def errInput(self,name):
		""" Erase input by name
		\param name Name of media generated by appliacation
		\param self Pointer on class
		"""
		f=open(self.dbs,"r")
		cn=f.read()
		f.close()
		tmp=""
		# removing line from dbs
		for line in cn.split("\n"):
			if line.replace(" ","") == "":
				continue
			elif name != line.split(";")[0]:
				tmp = tmp + line +  "\n"
		f=open(self.dbs,"w")
		f.write(tmp)
		f.close()
		# removing list file
		if os.path.isfile(self.lsts + "/" + name + ".txt"):
			os.remove(self.lsts + "/" + name + ".txt")
		if os.path.isfile("./books/" + name + ".txt"):
			os.remove("./books/" + name + ".txt")
	def genBookl(self,li):
		""" Generate Booklet
		\param li Listed item to be generated booklet for
		\param self Pointer on class
		"""
		bkl=""
		i = 0
		d=0
		while i < 77:
			if i < 6:
				bkl += "#"
			elif i > 70:
				bkl += "#"
			else:
				bkl += "#"
			i += 1
		bkl += "\n"
		d += 1
		
		while d < 33:
			if d == 4:
				i=0
				while i < 77:
					if i == 0:
						bkl += "#"
					elif i == 6:
						bkl += "#"
					elif i == 70:
						bkl += "#"
					elif i == 76:
						bkl += "#"
					elif i == 14:
						bkl += "NAME: "
						bkl += li['name']
						i += (5+len(li['name'])) 
					else:
						bkl += " "
					i += 1
				bkl += "\n"
				d += 1
			else:
				i=0
				while i < 77:
					if i == 0:
						bkl += "#"
					elif i == 6:
						bkl += "#"
					elif i == 70:
						bkl += "#"
					elif i == 76:
						bkl += "#"
					else:
						bkl += " "
					i += 1
				bkl += "\n"
				d += 1

		i=0
		while i < 77:
			if i < 6:
				bkl += "#"
			elif i > 70:
				bkl += "#"
			else:
				bkl += "#"
			i += 1
		bkl += "\n"
		
		while d < 64:
			i=0
			while i < 77:
				if i == 6:
					bkl += "#"
				elif i == 70:
					bkl += "#"
				else:
					bkl += " "
				i += 1
			bkl += "\n"
			d += 1

		i=0
		while i < 77:
			if i < 6:
				bkl += " "
			elif i > 70:
				bkl += " "
			else:
				bkl += "#"
			i += 1
		bkl += "\n"
		
		j=6
		u=10
		while d < 69:
			i=0
			while i < 77:
				if i == j:
					bkl += "#"
				elif i == 60 + u:
					bkl += "#"
				else:
					bkl += " "
				i += 1
			j += 1
			u -= 1
			bkl += "\n"			
			d += 1

		i=0
		while i < 77:
			if i < 12:
				bkl += " "
			elif i > 65:
				bkl += " "
			else:
				bkl += "#"
			i += 1
		bkl += "\n"		
			
		f=open("./books/" + li['name'] + ".txt","w")
		f.write(bkl)
		f.close()
	def getList(self):
		""" Give a list of DBase entries
		\param self Pointer on class
		"""
		f=open(self.dbs,"r")
		cn=f.read()
		f.close()
		tm=[]
		for line in cn.split("\n"):
			if line.replace(" ","") == "":
				continue
			tmp=dict()
			tmp['name']=line.split(";")[0]
			tmp['hash']=line.split(";")[1]
			tmp['date']=line.split(";")[2]
			tmp['path']=line.split(";")[3]
			tm.append(tmp)
		return tm
	def buildListTxt(self,path="./list.txt"):
		""" Give a list of DBase entries
		\param path Name of output file to print a list
		\param self Pointer on class
		"""
		l=self.getList()
		w=""
		for it in l:
			w += "NAME: " + it['name'] + "\n"
			w += "\n"
			w += "GENERATED IN: "+ it['date']  + "\n"
			if os.path.isfile(it['path']):
				w += "CONTAINING: \n"
				fl=open(it['path'],"r")
				fn=fl.read()
				fl.close()
				w += fn 
			w += "______________________________\n"
		f=open(path,"w")
		f.write(w)
		f.close()
if __name__=="__main__":
	print("Just for import")
	#db=DBHand()
	#print db.getLastName()
	#print DBHand().getList()
