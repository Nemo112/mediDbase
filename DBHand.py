#!/usr/bin/python
# -*- coding: utf-8 -*-
## \file DBHand.py
## \brief Class for getting information from db file

import os
import glob
from Indx import Indx

class DBHand:
	""" \brief Class for working with DBfiles
	"""
	def __init__(self):
		""" Constructor of the class
		\param self Pointer on class
		"""
		## Dbs file path
		self.dbs = "./dblst.csv"
		## List files dir
		self.lsts = "./lists"
		if os.path.isfile(self.dbs) == False:
			raise FileNotFoundError()
		if os.path.isdir(self.lsts) == False:
			raise FileNotFoundError()
	def getByName(self,name):
		""" Constructor of the class
		\param name Name of medium
		\param self Pointer on class
		\return Dict containing result
		"""
		# line in db:
		# heellhs;hash;date;./lists/helllhs.txt
		# name;hash;date;path to file list
		fl=open(self.dbs,"r")
		cnt=fl.read()
		fl.close()
		for ln in cnt.split("\n"):
			if ln.split(";")[0] == name:
				tmp=Dict()
				tmp['name']=name
				tmp['hash']=ln.split(";")[1]
				tmp['date']=ln.split(";")[2]
				tmp['path']=ln.split(";")[3]
				return tmp
		return None
	def getByHash(self,hash):
		""" Getter from dbase by hash
		\param hash Hash of medium
		\param self Pointer on class
		\return Dict containing result
		"""
		fl=open(self.dbs,"r")
		cnt=fl.read()
		fl.close()
		for ln in cnt.split("\n"):
			if ln.split(";")[1] == hash:
				tmp=Dict()
				tmp['name']=ln.split(";")[0]
				tmp['hash']=hash
				tmp['date']=ln.split(";")[2]
				tmp['path']=ln.split(";")[3]
				return tmp
		return None
	def getByContFls(self,name):
		""" Constructor of the class
		\param name Name of file to by looking
		\param self Pointer on class
		\return Dict containing result
		"""
		gFl=""
		lst=glob.glob(self.lsts + "/*.txt")
		for fl in lst:
			f=fopen(fl,"r")
			cn=f.read()
			f.close()
			for line in cn.split("\n"):
				if name in line:
					gFl=fl
					break
		fl=open(self.dbs,"r")
		cnt=fl.read()
		fl.close()
		for ln in cnt.split("\n"):
			if ln.split(";")[3] == gFl:
				tmp=Dict()
				tmp['name']=ln.split(";")[0]
				tmp['hash']=ln.split(";")[1]
				tmp['date']=ln.split(";")[2]
				tmp['path']=gFl
				return tmp
		return None
	def genNewInput(self,name,flP,qo=None):
		""" Inputs new line in DBase
		\param name Name of media given by user
		\param self Pointer on class
		"""
		# line in db:
		# heellhs;hash;date;./lists/helllhs.txt
		# name;hash;date;path to file list
		if qo != None:
			qo.put("Init;10")
		# generating line to db
		ind=Indx()
		nm=ind.makeName(name)
		if qo != None:
			qo.put("Name;40")
		hs=ind.hashFile(flP)
		if qo != None:
			qo.put("Hash;80")
		dt=ind.getTime()
		if qo != None:
			qo.put("Date;85")
		lst=ind.lstFiles(flP)
		i# Writting line in db
		if qo != None:
			qo.put("DB;90")
		l=fopen(self.dbs,"a")
		fl.write(nm + ";" + hs + ";" + dt + ";" + self.lsts + "/" + nm + ".txt")
		fl.close()
		# Writting list of medium
		fl=fopen(self.lsts + "/" + nm + ".txt","w")
		fl.write(lst)
		fl.close()
	def errInput(self,name):
		""" Erase input by name
		\param name Name of media generated by appliacation
		\param self Pointer on class
		"""
		f=fopen(self.dbs,"r")
		cn=f.read()
		f.close()
		tmp=""
		# removing line from dbs
		for line in cn.split("\n"):
			if name != line.split(";")[0]:
				tmp = tmp + line +  "\n"
		f=fopen(self.dbs,"w")
		f.write(tmp)
		f.close()
		# removing list file
		os.remove(self.lsts + "/" + name + ".txt")
	def getList(self):
		""" Give a list of DBase entries
		\param self Pointer on class
		"""
		f=fopen(self.dbs,"r")
		cn=f.read()
		f.close()
		tm=()
		for line in cn.split("\n"):
			tmp=Dict()
			tmp['name']=line.split(";")[0]
			tmp['hash']=line.split(";")[1]
			tmp['date']=line.split(";")[2]
			tmp['path']=line.split(";")[3]
			tm.append(tmp)
		return tm
if __name__=="__main__":
	print("Just for import")